/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.list

class LinkedList {
    private var head: Node? = null

    /**
     * Appends the given string to the end of the list.
     *
     * If the list is empty the element becomes the new head; otherwise it is linked as the current tail's next node.
     *
     * @param element The string to append.
     */
    fun add(element: String) {
        val newNode = Node(element)

        val it = tail(head)
        if (it == null) {
            head = newNode
        } else {
            it.next = newNode
        }
    }

    /**
     * Returns the last node (tail) of the singly linked list starting from [head], or `null` if the list is empty.
     *
     * @param head the starting node of the list, or `null` for an empty list
     * @return the tail node or `null` when [head] is `null`
     */
    private fun tail(head: Node?): Node? {
        var it: Node?

        it = head
        while (it?.next != null) {
            it = it.next
        }

        return it
    }

    /**
     * Removes the first occurrence of the given element from the list.
     *
     * Searches the list from the head and unlinks the first node whose string equals
     * the provided element (case-sensitive). If a matching node is found it is
     * removed and the method returns true; otherwise returns false.
     *
     * @param element The string value to remove.
     * @return True if an element was removed; false if no matching element was found.
     */
    fun remove(element: String): Boolean {
        var result = false
        var previousIt: Node? = null
        var it: Node? = head
        while (!result && it != null) {
            if (0 == element.compareTo(it.data)) {
                result = true
                unlink(previousIt, it)
                break
            }
            previousIt = it
            it = it.next
        }

        return result
    }

    /**
     * Unlink the given node from the list.
     *
     * If `currentIt` is the head, updates `head` to `currentIt.next`; otherwise updates
     * `previousIt.next` to skip `currentIt`.
     *
     * @param previousIt The node immediately before `currentIt`, or null if `currentIt` is the head.
     * @param currentIt The node to remove from the list.
     */
    private fun unlink(previousIt: Node?, currentIt: Node) {
        if (currentIt == head) {
            head = currentIt.next
        } else {
            previousIt?.next = currentIt.next
        }
    }

    /**
     * Returns the number of elements in the list.
     *
     * Traverses the linked list from the head and counts nodes.
     *
     * @return The current size (number of nodes) in this list.
     */
    fun size(): Int {
        var size = 0

        var it = head
        while (it != null) {
            ++size
            it = it.next
        }

        return size
    }

    /**
     * Return the element at the given 0-based index.
     *
     * Negative indices are treated as 0 (the head). If the index is greater than
     * or equal to the list size (or the list is empty), an [IndexOutOfBoundsException]
     * is thrown.
     *
     * @param idx 0-based position of the element to retrieve.
     * @return the string stored at the specified index.
     * @throws IndexOutOfBoundsException if no element exists at the requested index.
     */
    fun get(idx: Int): String {
        var index = idx
        var it = head
        while (index > 0 && it != null) {
            it = it.next
            index--
        }

        if (it == null) {
            throw IndexOutOfBoundsException("Index is out of range")
        }

        return it.data
    }

    private data class Node(val data: String) {
        var next: Node? = null
    }
}
